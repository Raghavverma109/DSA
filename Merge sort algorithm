// Merge sort algorithm


#include <iostream>
using namespace std;
#include <vector>

void merge(int* arr , int s ,int e){
    int mid  = (s+e)/2;
    int len1 = mid-s+1; //len of sorted left sub-array
    int len2 = e-mid;   //len of sorted right sub-array
    
    int *left = new int[len1]; //creting left sub array
    int *right = new int[len2];  //creting right sub array
    
    //copy left values 
    int k =s;
    for(int i= 0; i<len1 ;i++){
        left[i] = arr[k++];
    }
    
    k=mid+1;
    for(int i= 0; i<len2 ;i++){
        right[i] = arr[k++];
    }
    
    //merge ka logic
    int leftIndex = 0;
    int rightIndex =0;
    int mainIndex =s;
    while(leftIndex<len1 && rightIndex<len2 ){
        if(left[leftIndex] < right[rightIndex]){
            arr[mainIndex++] = left[leftIndex++];
        }
        else{
            arr[mainIndex++] = right[rightIndex++];
        }
    }
    //copy remaining element 
    while(leftIndex<len1){
        arr[mainIndex++] = left[leftIndex++];
    }
    while(rightIndex<len2){
        arr[mainIndex++] = right[rightIndex++];
    }
}

void mergeSort(int* arr , int s ,int e){
    
    //base case 
    if(s>=e) return;
    
    int mid = (s+e)/2;

    //baki recursion dekh lega
    //left part recursion dekhle 
    mergeSort(arr , s , mid);
    
    //right part recursion dekhle 
    mergeSort(arr , mid+1 , e);
    
    //now merge two sorted array
    merge(arr , s ,e );
    
}

int main() {
    int arr[] ={38,27,43,3,9,20};
    int n =6 ;
    int s =0 , e =n-1;
    mergeSort(arr ,s ,e );
    
    for(int i =0 ;i<n ;i++){
        cout<<arr[i]<<" ";
    }
    cout<<" ";

    return 0;
}
