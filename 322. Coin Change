//                               322. Coin Change


class Solution {
public:
     int coinChange(vector<int>& coins, int amount) {
        //memorize map
        unordered_map<int , int >memo ;
        return coinChange_Helper(coins,  amount , memo);
     }

private:
    int coinChange_Helper(vector<int>& coins, int amount , unordered_map<int,int>&memo ) {
        // Base cases
        if (amount == 0) return 0;
        if (amount < 0) return -1;

        //CHECK memorization
        if(memo.find(amount) != memo.end()) return memo[amount];

        int mini = INT_MAX;

        // Try every coin
        for (int i = 0; i < coins.size(); i++) {
            int ans = coinChange_Helper(coins, amount - coins[i] , memo);
            if (ans != -1) {
                mini = min(mini, ans + 1);
            }
        }

//By storing the result in memo, the function ensures that if the same amount is encountered again, it can return the result directly from the memo without recalculating it.
//This memoization significantly improves the efficiency of the function by avoiding redundant calculations for the same subproblems.
        memo[amount] = (mini == INT_MAX) ? -1 : mini;
        return memo[amount];
    }
};
