
Question:
2418. Sort the People

//my code

class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        int n = heights.size();

        // Create a vector of pairs where each pair contains a height and the
        // corresponding name
        vector<pair<int, string>> people;
        for (int i = 0; i < n; i++) {
            people.push_back({heights[i], names[i]});
        }
        // Sort the vector of pairs by the first element (height) in descending
        // order
        // use of lembda function.
        sort(people.begin(), people.end(),
             [](const pair<int,string>& a, const pair<int,string>& b) {
                 return a.first > b.first;
             });

        //{return a.first >b.first} --> body of the lembda function , it return
        //true if a>b (height)
        vector<string> sorted_name;
        for (auto i : people) {
            sorted_name.push_back(i.second);
        }

        return sorted_name;
    }
};


//easy code 

class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        vector<string> s;
        int n = heights.size();
        unordered_map<int,string> mp;
        for(int i=0;i<n;i++)
        {
            mp[heights[i]]=names[i];
        }
        sort(heights.rbegin(),heights.rend());
        for(int i=0;i<n;i++)
        {
            s.push_back(mp[heights[i]]);
        }
        return s;
    }
};
