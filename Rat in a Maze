// Rat in a Maze


#include <iostream>
using namespace std ;
#include <vector>

bool isSafe(int i , int j , int row , int col , int arr[][3] ,vector<vector<bool>> &visited ){
    //it will return true if three conditions are true :
    //1. index inside array 
    //2. cell ke ander 1 hona chahiye 
    //3. not visited 
    if( 
        ((i>=0 && i<row) && (j>=0 && j<col)) && (arr[i][j]==1 ) && (visited[i][j] == false)
        ){
            return true;
        }
    else return false ;
}

bool solveMaze(int arr[3][3] , int row ,int col , int i , int j ,vector<vector<bool>> &visited , vector<string > &path , string output ) {
    
    //base case
    if(i ==row-1 && j == col-1 ){
        //ans found 
        path.push_back(output);
        return 1;
        
    }
    
    //Down (D) - ( i+1 , j )
    if(isSafe( i+1 , j , row ,col , arr , visited )){
        visited[i+1][j] = true;
        //recursive call
        solveMaze(arr , row , col , i +1 , j ,visited , path ,output+'D');
        //Backtrack
        visited[i+1][j] = false;
    }
    
    //Left (L) - ( i , j-1 )
    if(isSafe( i , j-1 , row ,col , arr , visited )){
        visited[i][j-1] = true;
        //recursive call
        solveMaze(arr , row , col , i , j-1 ,visited , path ,output+'L');
        //Backtrack
        visited[i][j-1] = false;
    }
    
    //Right () - ( i , j+1 )
    if(isSafe( i , j+1 , row ,col , arr , visited )){
        visited[i][j+1] = true;
        //recursive call
        solveMaze(arr , row , col , i , j+1 ,visited , path ,output+'R');
        //Backtrack
        visited[i][j+1] = false;
    }
    
    //Up (U) - ( i-1 , j )
    if(isSafe( i-1 , j , row ,col , arr , visited )){
        visited[i-1][j] = true;
        //recursive call
        solveMaze(arr , row , col , i -1 , j ,visited , path ,output+'U');
        //Backtrack
        visited[i-1][j] = false;
    }
}

int main() {
    

    int maze[3][3] = { 
        {1,0,0},
        {1,1,0},
        {1,1,1}};
        
        //ege case 
        if(maze[0][0]==0) {
            cout<<"No path exist ";
            return 0;
        }
    int row =3 , col = 3;
    
    
    vector<vector<bool>>visited(row , vector<bool>(col , false));
    //source ki value ke liye true mark 
    visited[0][0] = true;
    
    vector<string >path;
    string output = "";
    
    solveMaze(maze , row ,col, 0 , 0 , visited, path, output);
    //i = 0- source ka x corrdinate 
    //j = 0- source ka y coordinate 
    
    cout<<"printing the path ðŸ˜Š :"<<endl;
    for(auto i : path){
        cout<<i<<" ";
    }
    cout<<endl;
    
    if(path.size() ==0) cout<<"No path exists ðŸ˜ž "<<endl;

    return 0;
}
