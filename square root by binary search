// finding the square root of a number using binary search 
#include <iostream>
using namespace std;
int square_root(int n ){
    int s = 0 , e = n-1 , mid;
    mid = s +(e-s)/2;
    int ans ;
    
    while(s<=e){
        if(mid*mid == n ){
            return mid;
        }
        else if (mid*mid <n){
             // Store the current mid as potential answer
            ans =mid;
            //shift right
            s = mid+1;
        }
        else{//when mid*mid > n
            //shift left
            e =mid -1;
        }
         mid = s +(e-s)/2; 
    }
    return ans; // Return the integer part of the square root
}



int main() {
    int n;
    cout<<"the value of n : ";
    cin>>n;
    int precision;
    cout<<"enter the no of flooting point in precision: ";
    cin>>precision;
    //function for integer part
    int ans = square_root(n);
    
    // Calculate the decimal part of the square root up to the specified precision 
    double step = 0.1;
    double final_ans =ans;
    // Loop for the specified number of decimal places in precision
    for (int i = 0 ; i<= precision ; i++){
        for (double j = final_ans ; j*j<=n ;j=j +step){
            final_ans = j;
        }
        //Update the value of step i.e.....0.01 then 0.001,..0.0001
        step = step /10;
    }
    cout<<"final ans is . "<<final_ans<<endl;
}
