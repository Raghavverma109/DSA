// .............N-Queen (optimized ) - using Hash_map................
#include <iostream>
using namespace std;
#include <vector>
#include <unordered_map> 

unordered_map<int ,bool>rowCheck;
unordered_map<int ,bool>upperDiagonalCheck;
unordered_map<int ,bool>lowerDiagonalCheck;

void printSolution(vector<vector<char>>& board , int n){
    
    for(int i =0 ; i< n ; i++){
        for(int j =0 ; j< n ; j++){
            cout<<board[i][j]<<" ";
    } 
    cout<<endl;
    }    
    cout<<endl;
}
bool isSafe(int row ,int col ,vector<vector<char>>& board,int n){
   
    //check 
    if(rowCheck[row] == true) return false;
    if(upperDiagonalCheck[(n-1)+col-row] ==true) return false;
    if(lowerDiagonalCheck[col+row] ==true) return false;
    
    return true;
    
}
void solve(vector<vector<char>>& board , int col ,int n){
    //base case 
    if(col>=n) {
        printSolution(board , n);
        return ;
    }
    
    //ek case solve kardo bakki recurion samal lega 
    for(int row = 0; row <n;row++){
        if(isSafe(row , col ,board , n)){
            board[row][col] = 'Q';
            
            rowCheck[row] = true;
            lowerDiagonalCheck[col+row] = true;
            upperDiagonalCheck[n-1+col-row] = true;
            
            //recursive call
            solve(board , col+1 , n); 
            
            //backtracting 
             board[row][col] = '-';
             rowCheck[row] = false;
            lowerDiagonalCheck[col+row] =false;
            upperDiagonalCheck[n-1+col-row] =false;
        }
    }
}
int main() {
    int n =4 ;
    vector<vector<char>>board(n , vector<char>(n ,'-'));
    int col = 0;
    
    cout<<"printing the possibles positions of QUEEN with all differnt cases :-"<<endl;
    solve(board , col , n);

    return 0;
}
